<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cohort Analysis Dashboard</title>
    <link href="/styles/style.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
</head>
<body>
    <div class="table-container">
        <div>
        <h1>Cohort</h1>
        <label for="timeline">Select Timeline:</label>
        <select id="timeline" aria-label="Select timeline">
            <option value="thismonth">This Month</option>
            <option value="previousmonth">Previous Month</option>
        </select>

        <label for="analysisType">Select Analysis Type:</label>
        <select id="analysisType" aria-label="Select analysis type">
            <option value="revenue">Revenue</option>
            <option value="quantity">Bottle Quantity</option>
        </select>

        <button id="exportButton" aria-label="Export data to Excel"><i class="fa fa-file-export"></i> Export</button>
        
        <div id="revenueTable">
            <h2>Revenue Analysis</h2>
            <table>
                <thead>
                    <tr>
                        <th>Brand Name</th>
                        <th>Last Order</th>
                        <% sortedUniqueMonths.forEach(month => { %>
                            <% const options = { year: 'numeric', month: 'short' }; %>
                            <% const revenueMonth = new Date(month).toLocaleDateString('en-US', options) %>
                            <th><%= revenueMonth %></th>
                        <% }); %>
                        <th>Total Revenue</th>
                        <th>Months Served</th>
                        <th>Average Revenue</th>
                        <th>LTV (1 year)</th>
                    </tr>
                </thead>
                <tbody>
                    <% BrandMonthlyData.forEach((monthData, brandName) => { %>
                        <tr>
                            <td><%= brandName %></td>
                            <td></td>
                            <% let total = 0; %>
                            <% let monthsServed = 0; %>
                            <% sortedUniqueMonths.forEach((month, index) => { %>
                                <% const revenue = monthData.get(month) || 0; %>
                                <% const Revenue = revenue.revenue || 0; %>
                                <% total += Revenue; %>
                                <% if(Revenue>0){ %>
                                    <% monthsServed += 1 %>
                                <% } %>
                                <% 
                                    let previousRevenue = index > 0 ? (monthData.get(sortedUniqueMonths[index - 1]) || 0).revenue || 0 : 0; 
                                    let cellColor = Revenue > previousRevenue ? 'rgba(144, 238, 144, 0.5);' : Revenue < previousRevenue ? 'rgba(255, 99, 71, 0.5);' : '';
                                %>
                                <td style="text-align: right; padding-right: 0; background-color:<%= cellColor %>;">
                                    <%= Revenue.toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %>
                                </td>
                            <% }); %>
                            <td><%= total.toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %></td>
                            <td><%= monthsServed %></td>
                            <td><%= (total/monthsServed).toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %></td>
                            <td><%= ((total/monthsServed)*12).toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %></td>
                        </tr>
                    <% }); %>
                </tbody>
                <tfoot>
                    <tr class="fixed-column">
                        <td>Total Revenue</td>
                        <% sortedUniqueMonths.forEach(month => { %>
                            <td>
                                <% const monthlyTotal = MonthlyTotals.get(month) || 0; %>
                                <% const monthlyRevenueTotal = monthlyTotal.revenue || 0; %>
                                <%= monthlyRevenueTotal.toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %>
                            </td>
                        <% }); %>
                        <td>
                            <% 
                                const grandRevenueTotal = Array.from(MonthlyTotals.values())
                                    .filter(item => item.revenue && !isNaN(item.revenue))
                                    .reduce((acc, val) => acc + (val.revenue || 0), 0); 
                            %>
                            <%= grandRevenueTotal.toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %>
                        </td>
                        <td>-</td>
                    </tr>
                    <tr>
                        <td>Tax Invoice Value</td>
                        <% sortedUniqueMonths.forEach(month => { %>
                            <td>
                                <% const monthlyTotal = MonthlyTotals.get(month) || 0; %>
                                <% const monthlyRevenueTotal = monthlyTotal.revenue * 1.18 || 0; %>
                                <%= monthlyRevenueTotal.toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %>
                            </td>
                        <% }); %>
                        <td>
                            <% 
                                const grandrevenueTotal = Array.from(MonthlyTotals.values())
                                    .filter(item => item.revenue && !isNaN(item.revenue))
                                    .reduce((acc, val) => acc + (val.revenue || 0), 0); 
                            %>
                            <% Taxedrevenue = grandrevenueTotal * 1.18 %>
                            <%= Taxedrevenue.toLocaleString('en-IN', { style: 'currency', currency: 'INR' }) %>
                        </td>
                    </tr>
                    <tr>
                        <td>Number of customers who placed Order</td>
                        <% sortedUniqueMonths.forEach(month => { %>
                            <td>
                                <%= MonthlyTotals.get(month).customers.size %>
                            </td>
                        <% }); %>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div id="quantityTable" style="display: none;">
            <h2>Bottle Cohort Analysis</h2>
            <table>
                <thead>
                    <tr>
                        <th>Brand Name</th>
                        <% sortedUniqueMonths.forEach(month => { %>
                            <% const options = { year: 'numeric', month: 'short' }; %>
                            <% const revenueMonth = new Date(month).toLocaleDateString('en-US', options) %>
                            <th><%= revenueMonth %></th>
                        <% }); %>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <% BrandMonthlyData.forEach((monthData, brandName) => { %>
                        <tr>
                            <td><%= brandName %></td>
                            <% let total = 0; %>
                            <% sortedUniqueMonths.forEach((month, index) => { %>
                                <% const quantity = monthData.get(month) || 0; %>
                                <% const Quantity = quantity.quantity || 0; %>
                                <% total += Quantity; %>
                                
                                <% 
                                    let previousQuantity = index > 0 ? (monthData.get(sortedUniqueMonths[index - 1]) || 0).quantity || 0 : 0; 
                                    let cellColor = Quantity > previousQuantity ? 'rgba(144, 238, 144, 0.5);' : Quantity < previousQuantity ? 'rgba(255, 99, 71, 0.5);' : '';
                                %>
                                <td style="text-align: right; padding-right: 0; background-color: <%= cellColor %>;">
                                    <%= Quantity %>
                                </td>
                            <% }); %>
                            <td><%= total %></td>
                        </tr>
                    <% }); %>
                </tbody>
                <tfoot>
                    <tr class="fixed-column">
                        <td>Total Quantity</td>
                        <% sortedUniqueMonths.forEach(month => { %>
                            <td>
                                <% const monthlyTotal = MonthlyTotals.get(month) || 0; %>
                                <% const monthlyQuantityTotal = monthlyTotal.quantity || 0; %>
                                <%= monthlyQuantityTotal %>
                            </td>
                        <% }); %>
                        <td>
                            <% const grandQuantityTotal = Array.from(MonthlyTotals.values()).filter(item =>
                                item.quantity && !isNaN(item.quantity)
                            ).reduce((acc, val) => acc + (val.quantity || 0), 0); %>
                            <%= grandQuantityTotal %>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <script>
        document.getElementById('analysisType').addEventListener('change', function() {
            const selectedValue = this.value;
            document.getElementById('revenueTable').style.display = selectedValue === 'revenue' ? 'block' : 'none';
            document.getElementById('quantityTable').style.display = selectedValue === 'quantity' ? 'block' : 'none';
        });

        document.getElementById('timeline').addEventListener('change', function() {
            const selectedTimeline = this.value;
            const loadingIndicator = document.getElementById('loading');

            loadingIndicator.style.display = 'block';

            let filteredMonths;
            const currentDate = new Date();

            if (selectedTimeline === 'thismonth') {
                filteredMonths = getLastNMonths(3, currentDate);
            } else if (selectedTimeline === 'previousmonth') {
                filteredMonths = getLastNMonths(6, currentDate);
            }

            updateTables(filteredMonths).then(() => {
                loadingIndicator.style.display = 'none';
            });
        });

        document.getElementById('exportButton').addEventListener('click', function() {
            const table = document.querySelector('#' + (document.getElementById('analysisType').value === 'revenue' ? 'revenueTable' : 'quantityTable') + ' table');
            const workbook = XLSX.utils.table_to_book(table, { sheet: "Cohort Data" });
            XLSX.writeFile(workbook, 'Cohort_Analysis.xlsx');
        });
    </script>
</body>
</html>
